/* Project 2 4-bit Adder in Verilog HDL
    Programmer: mjlach
    CS 354 Spring 2024
    Prof. Markov
*/

/* Half Adder module detail */
module halfadder (S,C,x,y); // Outputs, then inputs
   input x,y;
   output S,C;  // Sum & Carry
// Instantiate primitive gates
   xor (S,x,y);
   and (C,x,y);
endmodule

/* Full Adder module detail */
module fulladder (S,C,x,y,z);   // outputs, then inputs
   input x,y,z;
   output S,C;  // Sum & Carry
   wire S1,D1,D2; // Outputs of first XOR and two AND gates
// Instantiate the halfadders
    halfadder HA1 (S1,D1,x,y),
              HA2 (S,D2,S1,z);
    or g1(C,D2,D1);
endmodule

/* 4-bit Adder module detail */
module _4bit_adder (S,C4,A,B,C0);
   input [3:0] A,B; // 4-bit inputs
   input C0;
   output [3:0] S;  // 4- bit Sum output
   output C4;
   wire C1,C2,C3;  //Intermediate carries
// Instantiate the fulladder                //         Outputs    -     Inputs
   fulladder  FA0 (S[0],C1,A[0],B[0],C0),   // Sum[0], CarryWire1 - A[0], B[0], CarryIn0
              FA1 (S[1],C2,A[1],B[1],C1),   // Sum[1], CarryWire2 - A[1], B[1], CarryWire1
              FA2 (S[2],C3,A[2],B[2],C2),   // Sum[2], CarryWire3 - A[2], B[2], CarryWire2
              FA3 (S[3],C4,A[3],B[3],C3);   // Sum[3], CarryOut4 - A[3], B[3], CarryWire3
endmodule

/* Note: This uses Hierarchical design in that we call back to already detailed modules rather than indicating the gates at every single level */
